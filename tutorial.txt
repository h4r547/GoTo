Problem Statement: Navigating a file system via terminal is a tedious process.
Especially, if after a bunch of cd and ls commands, if you end up at the wrong
location.
So, to deal with this, I've written a script that can store location bookmarks
and navigate to those locations as required.

1. Name of commands: cat
cat command is used to display the contents of a file

Example of its usage:
  -bash-4.2$ cat examplefile.txt
  this is line 1 Computer Systems
  this is line 2 computer

*************************************************************************

2. Name of command: grep
grep is used to search for a particular pattern in a file, and return the lines
that contain that pattern.

Example of its usage:
  $ grep Computer examplefile.txt
  this is line 2 Computer Systems

Some additional options:

-i: Allows you to search for words in a case-insensitive manner:
-c: Another option instructs grep to count the number of times a pattern appears.
-v: You can search for lines that don't contain a pattern by adding the "-v"
option.

*************************************************************************

3. Name of Command: pwd
pwd is used to print/ return the current working directory.

Example of its usage:
  $ pwd
  /home/prateekpisat1

*************************************************************************

4. Name of Command: cd
cd is used to move to another directory.

5. Name of Command: mkdir
mkdir is used to make a new directory

Example of their usage:
  $ pwd
  $ /home/prateekpisat1
  $ mkdir newDir
  $ cd newDir/
  $ pwd
  $ /home/prateekpisat1/newDir

*************************************************************************

6. Name of Command: mv
mv is used to replace one file with another

Example of its usage:
  $ ls
  file1
  $ mv file1 file2
  $ ls
  file2

*************************************************************************

7. Name of command: echo
echo is used to print a message/ data to the terminal.

Example of its usage:
  $ echo "Hello World."
  Hello World.

*************************************************************************

8. Name of Command: read
read is used as prompt to accept for the user.

Example of its usage:
  $ read x
  12
  $ echo $x
  $ 12

*************************************************************************

9. Name of command: touch
 touch is used to create a new if file if it does not already exist.

Example of its usage:
  $ ls
  $ touch goto.conf
  $ ls
  goto.conf

*************************************************************************

10. Name of command: cut
cut in UNIX is used cutting sections from each line of files.

Examples of its usage:
  $ echo 'baz' | cut -b 2
  a

Some additional options used in the script:
-d : To cut using a delimiter use the -d option.

*************************************************************************

Certain Shorthand Operators used in the Script:

1. > : redirects output to a file, overwriting the file.

2. >> : redirects output to a file appending the redirected output at the end.
************************************************************************
*BEFORE RUNNING THE SCRIPT*
Each shell script executes in its own sub-shell. So, commands such as "cd" won't
 affect the parent-shell.
Since the script primarily depends on the 'cd' command, we need to ensure that
the command can be run in a shell-script, and performs the required task.
To avoid the problem, we source the script instead of running it.
Sourcing (done by. or source) causes the script to be executed in the same shell
 instead of running in its own sub-shell.
Sourcing the script does not create a new shell. All commands are run in the
current shell and changes to the environment take effect in the current shell.

Instead of running the script as ./script-name, use:
   . ./script-name.sh OR source ./scriptname.sh
************************************************************************
To run the script:
$ . ./goto.sh -s -> to Save the current working directory.
$ . ./goto.sh -g -> to go to a saved bookmark.
$ . ./goto.sh -l -> to list all the saved bookmarks.
$ . ./goto.sh -r -> to delete a saved bookmark.
$ . ./goto.sh -e -> to edit a saved bookmark.
$ . ./goto.sh -h -> to get help on how to use the script.

A Demo Run:
$ pwd
/home/prateek/GoTo
$ . ./goto.sh -s
Enter Bookmark Name:
goto
Saved
$ . ./goto.sh -l
goto : /home/prateek/GoTo
$ . ./goto.sh -e
Enter Bookmark Name:
goto
Enter new bookmark name.
newgoto
Edit Complete.
$ . ./goto.sh -l
newgoto : /home/prateek/GoTo
$ cd ..
$ pwd
/home/prateek
$ . ./GoTo/goto.sh -g
Where to go?
newgoto
$ pwd
/home/prateek/GoTo
$ . ./goto.sh -r
Enter Bookmark name
newgoto
$ . ./goto.sh -l
$
